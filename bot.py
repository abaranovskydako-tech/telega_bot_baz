import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import os
import logging
import re
from datetime import datetime
from dotenv import load_dotenv
import database
from data_generator import PersonalDataGenerator

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize bot
bot = telebot.TeleBot(os.environ.get('TELEGRAM_BOT_TOKEN'))
data_generator = PersonalDataGenerator()

# User states for survey
user_states = {}  # {user_id: {'state': 'waiting_name', 'data': {}}

def create_main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    keyboard.add(
        InlineKeyboardButton("üìù –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="start_survey"),
        InlineKeyboardButton("üìö –°–ø—Ä–∞–≤–∫–∞", callback_data="help_info")
    )
    keyboard.add(
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å", callback_data="cancel_survey"),
        InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –æ–ø—Ä–æ—Å", callback_data="new_survey")
    )
    
    return keyboard

def create_citizenship_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞."""
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    keyboard.add(
        InlineKeyboardButton("üá∑üá∫ –†–æ—Å—Å–∏—è", callback_data="citizenship_–†–æ—Å—Å–∏—è"),
        InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞", callback_data="citizenship_–£–∫—Ä–∞–∏–Ω–∞")
    )
    keyboard.add(
        InlineKeyboardButton("üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å", callback_data="citizenship_–ë–µ–ª–∞—Ä—É—Å—å"),
        InlineKeyboardButton("üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", callback_data="citizenship_–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω")
    )
    keyboard.add(
        InlineKeyboardButton("üá¶üá≤ –ê—Ä–º–µ–Ω–∏—è", callback_data="citizenship_–ê—Ä–º–µ–Ω–∏—è"),
        InlineKeyboardButton("üá¶üáø –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω", callback_data="citizenship_–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω")
    )
    keyboard.add(
        InlineKeyboardButton("üá¨üá™ –ì—Ä—É–∑–∏—è", callback_data="citizenship_–ì—Ä—É–∑–∏—è"),
        InlineKeyboardButton("üá≤üá© –ú–æ–ª–¥–æ–≤–∞", callback_data="citizenship_–ú–æ–ª–¥–æ–≤–∞")
    )
    keyboard.add(
        InlineKeyboardButton("‚úèÔ∏è –î—Ä—É–≥–æ–µ", callback_data="citizenship_custom")
    )
    
    return keyboard

def create_date_format_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã."""
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    keyboard.add(
        InlineKeyboardButton("üìÖ 15.03.1990", callback_data="date_example_15.03.1990"),
        InlineKeyboardButton("üìÖ 22.07.1985", callback_data="date_example_22.07.1985")
    )
    keyboard.add(
        InlineKeyboardButton("üìÖ 08.12.1995", callback_data="date_example_08.12.1995"),
        InlineKeyboardButton("üìÖ 30.01.1980", callback_data="date_example_30.01.1980")
    )
    keyboard.add(
        InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="date_manual")
    )
    
    return keyboard

def create_survey_progress_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø—Ä–æ—Å–∞."""
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    keyboard.add(
        InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="show_progress"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å", callback_data="cancel_survey"),
        InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_survey")
    )
    
    return keyboard

def create_new_survey_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞."""
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    keyboard.add(
        InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å", callback_data="new_survey")
    )
    
    return keyboard

def save_survey_data(user_id, data):
    """Save survey data to database."""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–æ–≤—É—é –ë–î
        full_name = data.get('full_name', '')
        birth_date = data.get('birth_date', '')
        citizenship = data.get('citizenship', '')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è PostgreSQL
        if birth_date:
            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
                parsed_date = datetime.strptime(birth_date, '%d.%m.%Y')
                birth_date = parsed_date.strftime('%Y-%m-%d')
            except ValueError:
                logger.error(f"Invalid date format: {birth_date}")
                birth_date = None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        new_id = database.save_response(user_id, full_name, birth_date, citizenship)
        logger.info(f"Survey data saved successfully for user {user_id} with ID {new_id}")
        return True
    except Exception as e:
        logger.error(f"Error saving survey data: {e}")
        return False

def create_survey_report(data):
    """Create survey completion report showing only user-entered data."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Å–∞–º
    user_entered_fields = {
        'full_name': 'üë§ –§–ò–û',
        'birth_date': 'üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', 
        'citizenship': 'üåç –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ'
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    auto_filled_fields = {
        'phone_number': 'üì± –¢–µ–ª–µ—Ñ–æ–Ω',
        'email': 'üìß Email',
        'address': 'üè† –ê–¥—Ä–µ—Å',
        'passport_series': 'üìÑ –ü–∞—Å–ø–æ—Ä—Ç (—Å–µ—Ä–∏—è)',
        'passport_number': 'üìÑ –ü–∞—Å–ø–æ—Ä—Ç (–Ω–æ–º–µ—Ä)',
        'education': 'üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
        'occupation': 'üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è',
        'income_level': 'üí∞ –£—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞',
        'marital_status': 'üíç –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ',
        'children_count': 'üë∂ –î–µ—Ç–∏'
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    report = "üéâ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
    report += "üìã –í–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ:\n"
    
    for field, label in user_entered_fields.items():
        if field in data and data[field]:
            report += f"{label}: {data[field]}\n"
    
    report += "\n‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!"
    
    return report

def setup_database():
    """Setup database connection."""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        database.init_db()
        logger.info("Database initialized successfully")
        return True
    except Exception as e:
        logger.error(f"Database connection error: {e}")
        return False

def setup_handlers():
    """Setup all bot message handlers."""
    def handle_start_survey(message, user_id):
        """Handle start survey button."""
        user_states[user_id] = {'state': 'waiting_name', 'data': {}}
        
        bot.edit_message_text(
            "üìù –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å!\n\n"
            "üåç –í–æ–ø—Ä–æ—Å 1: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û\n\n"
            "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
            chat_id=message.chat.id,
            message_id=message.message_id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –§–ò–û
        bot.send_message(message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

    def handle_help_info(message):
        """Handle help info button."""
        help_text = (
            "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –æ–ø—Ä–æ—Å–∞.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /start - –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ–ø—Ä–æ—Å\n\n"
            "–ü—Ä–æ—Ü–µ—Å—Å –æ–ø—Ä–æ—Å–∞:\n"
            "1. –í–≤–µ–¥–∏—Ç–µ –§–ò–û\n"
            "2. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)\n"
            "3. –£–∫–∞–∂–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ\n"
            "4. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç—á–µ—Ç —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
        )
        bot.edit_message_text(help_text, chat_id=message.chat.id, message_id=message.message_id)

    def handle_cancel_survey(message, user_id):
        """Handle cancel survey button."""
        if user_id in user_states:
            del user_states[user_id]
            bot.edit_message_text("‚ùå –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.", chat_id=message.chat.id, message_id=message.message_id)
            bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞.")
        else:
            bot.answer_callback_query(message.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.")

    def handle_new_survey(message, user_id):
        """Handle new survey button."""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
        user_states[user_id] = {'state': 'waiting_name', 'data': {}}
        
        bot.edit_message_text(
            "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å!\n\n"
            "üåç –í–æ–ø—Ä–æ—Å 1: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û\n\n"
            "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
            chat_id=message.chat.id,
            message_id=message.message_id
        )
        
        bot.send_message(message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

    def handle_show_progress(message, user_id):
        """Handle show progress button."""
        if user_id not in user_states:
            bot.answer_callback_query(message.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.")
            return
        
        current_state = user_states[user_id]['state']
        data = user_states[user_id]['data']
        
        progress_text = "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–ø—Ä–æ—Å–∞:\n\n"
        
        if 'full_name' in data:
            progress_text += f"‚úÖ –§–ò–û: {data['full_name']}\n"
        else:
            progress_text += "‚ùå –§–ò–û: –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ\n"
        
        if 'birth_date' in data:
            progress_text += f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birth_date']}\n"
        else:
            progress_text += "‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ\n"
        
        if 'citizenship' in data:
            progress_text += f"‚úÖ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {data['citizenship']}\n"
        else:
            progress_text += "‚ùå –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ\n"
        
        progress_text += f"\nüéØ –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: {current_state}"
        
        bot.edit_message_text(progress_text, chat_id=message.chat.id, message_id=message.message_id)

    def handle_restart_survey(message, user_id):
        """Handle restart survey button."""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
        user_states[user_id] = {'state': 'waiting_name', 'data': {}}
        
        bot.edit_message_text(
            "üîÑ –û–ø—Ä–æ—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!\n\n"
            "üåç –í–æ–ø—Ä–æ—Å 1: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û\n\n"
            "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
            chat_id=message.chat.id,
            message_id=message.message_id
        )
        
        bot.send_message(message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

    def handle_citizenship_selection(message, user_id, citizenship):
        """Handle citizenship selection from keyboard."""
        user_states[user_id]['data']['citizenship'] = citizenship
        user_states[user_id]['state'] = 'completed'
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        full_name = user_states[user_id]['data']['full_name']
        random_data = data_generator.generate_all_random_data(full_name)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        all_data = {**user_states[user_id]['data'], **random_data}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if save_survey_data(user_id, all_data):
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = create_survey_report(all_data)
            bot.edit_message_text("‚úÖ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ!", chat_id=message.chat.id, message_id=message.message_id)
            bot.send_message(message.chat.id, report, reply_markup=create_new_survey_keyboard())
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_states[user_id]
        else:
            bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.", chat_id=message.chat.id, message_id=message.message_id)

    def handle_custom_citizenship(message, user_id):
        """Handle custom citizenship input request."""
        user_states[user_id]['state'] = 'waiting_custom_citizenship'
        
        bot.edit_message_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –≤—Ä—É—á–Ω—É—é:",
            chat_id=message.chat.id,
            message_id=message.message_id
        )

    def handle_date_example(message, user_id, date_example):
        """Handle date example selection."""
        user_states[user_id]['data']['birth_date'] = date_example
        user_states[user_id]['state'] = 'waiting_citizenship'
        
        citizenship_text = (
            f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–∞: {date_example}\n\n"
            f"üåç –í–æ–ø—Ä–æ—Å 3: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:"
        )
        
        bot.edit_message_text(citizenship_text, chat_id=message.chat.id, message_id=message.message_id)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:", reply_markup=create_citizenship_keyboard())

    def handle_date_manual(message, user_id):
        """Handle manual date input request."""
        user_states[user_id]['state'] = 'waiting_birth_date'
        
        bot.edit_message_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
            "–ü—Ä–∏–º–µ—Ä: 15.03.1990",
            chat_id=message.chat.id,
            message_id=message.message_id
        )

    def handle_name_input(message, text):
        """Handle full name input."""
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –§–ò–û (–º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞)
        if len(text.split()) < 2:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û
        user_states[user_id]['data']['full_name'] = text
        user_states[user_id]['state'] = 'waiting_birth_date'
        
        bot.reply_to(message, 
            f"‚úÖ –§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {text}\n\n"
            f"üìÖ –í–æ–ø—Ä–æ—Å 2: –ö–∞–∫–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è?\n"
            f"–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990)",
            reply_markup=create_date_format_keyboard()
        )

    def handle_birth_date_input(message, text):
        """Handle birth date input."""
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–î–î.–ú–ú.–ì–ì–ì–ì)
        date_pattern = r'^\d{2}\.\d{2}\.\d{4}$'
        if not re.match(date_pattern, text):
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990)")
            return
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
            birth_date = datetime.strptime(text, '%d.%m.%Y')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è
            if birth_date > datetime.now():
                bot.reply_to(message, "‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
                return
            
            if birth_date.year < 1900:
                bot.reply_to(message, "‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ 1900 –≥–æ–¥–∞!")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
            user_states[user_id]['data']['birth_date'] = text
            user_states[user_id]['state'] = 'waiting_citizenship'
            
            citizenship_text = (
                f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {text}\n\n"
                f"üåç –í–æ–ø—Ä–æ—Å 3: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:"
            )
            
            bot.reply_to(message, citizenship_text, reply_markup=create_citizenship_keyboard())
            
        except ValueError:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã.")

    def handle_citizenship_input(message, text):
        """Handle citizenship input."""
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ
        if len(text.strip()) < 2:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ
        user_states[user_id]['data']['citizenship'] = text.strip()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        full_name = user_states[user_id]['data']['full_name']
        random_data = data_generator.generate_all_random_data(full_name)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        all_data = {**user_states[user_id]['data'], **random_data}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if save_survey_data(user_id, all_data):
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = create_survey_report(all_data)
            bot.reply_to(message, report, reply_markup=create_new_survey_keyboard())
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_states[user_id]
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel")

    def handle_custom_citizenship_input(message, text):
        """Handle custom citizenship input."""
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ
        if len(text.strip()) < 2:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ
        user_states[user_id]['data']['citizenship'] = text.strip()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        full_name = user_states[user_id]['data']['full_name']
        random_data = data_generator.generate_all_random_data(full_name)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        all_data = {**user_states[user_id]['data'], **random_data}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if save_survey_data(user_id, all_data):
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = create_survey_report(all_data)
            bot.reply_to(message, report, reply_markup=create_new_survey_keyboard())
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_states[user_id]
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel")
    
    @bot.message_handler(commands=['start'])
    def start_command(message):
        """Handle /start command."""
        user_id = message.from_user.id
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = {'state': 'main_menu', 'data': {}}
        
        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–æ—Ç –û–ø—Ä–æ—Å–∞ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –î–∞–Ω–Ω—ã—Ö!\n\n"
            "üéØ –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –æ–ø—Ä–æ—Å–∞ —Å –∫—Ä–∞—Å–∏–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º!\n\n"
            "üìã –ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:\n"
            "‚Ä¢ üìù 3 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞\n"
            "‚Ä¢ üé® –°—Ç–∏–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞\n"
            "‚Ä¢ üìä –ö—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        bot.reply_to(message, welcome_text, reply_markup=create_main_menu_keyboard())
    
    @bot.message_handler(commands=['help'])
    def help_command(message):
        """Handle /help command."""
        help_text = (
            "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –æ–ø—Ä–æ—Å–∞.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /start - –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ–ø—Ä–æ—Å\n\n"
            "–ü—Ä–æ—Ü–µ—Å—Å –æ–ø—Ä–æ—Å–∞:\n"
            "1. –í–≤–µ–¥–∏—Ç–µ –§–ò–û\n"
            "2. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)\n"
            "3. –£–∫–∞–∂–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ\n"
            "4. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç—á–µ—Ç —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
        )
        bot.reply_to(message, help_text)
    
    @bot.message_handler(commands=['cancel'])
    def cancel_command(message):
        """Handle /cancel command."""
        user_id = message.from_user.id
        
        if user_id in user_states:
            del user_states[user_id]
            bot.reply_to(message, "‚ùå –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞.")
        else:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.")
    
    @bot.callback_query_handler(func=lambda call: True)
    def handle_callback_query(call):
        """Handle all callback queries from inline keyboards."""
        user_id = call.from_user.id
        data = call.data
        
        try:
            if data == "start_survey":
                handle_start_survey(call.message, user_id)
            elif data == "help_info":
                handle_help_info(call.message)
            elif data == "cancel_survey":
                handle_cancel_survey(call.message, user_id)
            elif data == "new_survey":
                handle_new_survey(call.message, user_id)
            elif data == "show_progress":
                handle_show_progress(call.message, user_id)
            elif data == "restart_survey":
                handle_restart_survey(call.message, user_id)
            elif data.startswith("citizenship_"):
                citizenship = data.replace("citizenship_", "")
                if citizenship == "custom":
                    handle_custom_citizenship(call.message, user_id)
                else:
                    handle_citizenship_selection(call.message, user_id, citizenship)
            elif data.startswith("date_example_"):
                date_example = data.replace("date_example_", "")
                handle_date_example(call.message, user_id, date_example)
            elif data == "date_manual":
                handle_date_manual(call.message, user_id)
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"Error handling callback query: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    @bot.message_handler(func=lambda message: True)
    def handle_survey_messages(message):
        """Handle survey responses."""
        user_id = message.from_user.id
        text = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å
        if user_id not in user_states:
            bot.reply_to(message, "üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞.")
            return
        
        current_state = user_states[user_id]['state']
        
        if current_state == 'waiting_name':
            handle_name_input(message, text)
        elif current_state == 'waiting_birth_date':
            handle_birth_date_input(message, text)
        elif current_state == 'waiting_citizenship':
            handle_citizenship_input(message, text)
        elif current_state == 'waiting_custom_citizenship':
            handle_custom_citizenship_input(message, text)
        else:
            bot.reply_to(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞.")

# --- —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def run_bot():
    """–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞."""
    # Setup database and handlers
    if setup_database():
        logger.info("Database connected successfully")
    else:
        logger.warning("Database connection failed")
    
    setup_handlers()
    
    # Run bot in polling mode
    logger.info("Starting Telegram bot...")
    bot.polling(none_stop=True)

if __name__ == "__main__":
    run_bot()
