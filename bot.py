import telebot
import os
import logging
import re
from datetime import datetime
from dotenv import load_dotenv
from database import DatabaseManager
from data_generator import PersonalDataGenerator

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize bot
bot = telebot.TeleBot(os.environ.get('TELEGRAM_BOT_TOKEN'))
db_manager = None
data_generator = PersonalDataGenerator()

# User states for survey
user_states = {}  # {user_id: {'state': 'waiting_name', 'data': {}}}

def setup_database():
    """Initialize database connection."""
    global db_manager
    db_path = os.environ.get('DATABASE_PATH', './questionnaire.db')
    username = os.environ.get('DB_USERNAME', '')
    password = os.environ.get('DB_PASSWORD', '')
    
    db_manager = DatabaseManager(db_path, username, password)
    
    if not db_manager.connect():
        logger.warning("Database connection failed")
        return False
    return True

def setup_handlers():
    """Setup all bot message handlers."""
    
    @bot.message_handler(commands=['start'])
    def start_command(message):
        """Handle /start command."""
        user_id = message.from_user.id
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = {'state': 'waiting_name', 'data': {}}
        
        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–æ—Ç –û–ø—Ä–æ—Å–∞ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –î–∞–Ω–Ω—ã—Ö!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –æ–ø—Ä–æ—Å–∞. –ú–Ω–µ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–∞–º 3 –≤–æ–ø—Ä–æ—Å–∞:\n\n"
            "üìù –í–æ–ø—Ä–æ—Å 1: –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–§–ò–û)\n"
            "üìÖ –í–æ–ø—Ä–æ—Å 2: –ö–∞–∫–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è? (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì)\n"
            "üåç –í–æ–ø—Ä–æ—Å 3: –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ\n\n"
            "–û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
            "–ù–∞—á–Ω–µ–º! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û)"
        )
        
        bot.reply_to(message, welcome_text)
    
    @bot.message_handler(commands=['help'])
    def help_command(message):
        """Handle /help command."""
        help_text = (
            "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –æ–ø—Ä–æ—Å–∞.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /start - –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ–ø—Ä–æ—Å\n\n"
            "–ü—Ä–æ—Ü–µ—Å—Å –æ–ø—Ä–æ—Å–∞:\n"
            "1. –í–≤–µ–¥–∏—Ç–µ –§–ò–û\n"
            "2. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)\n"
            "3. –£–∫–∞–∂–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ\n"
            "4. –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        )
        bot.reply_to(message, help_text)
    
    @bot.message_handler(commands=['cancel'])
    def cancel_command(message):
        """Handle /cancel command."""
        user_id = message.from_user.id
        
        if user_id in user_states:
            del user_states[user_id]
            bot.reply_to(message, "‚ùå –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞.")
        else:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.")
    
    @bot.message_handler(func=lambda message: True)
    def handle_survey_messages(message):
        """Handle survey responses."""
        user_id = message.from_user.id
        text = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å
        if user_id not in user_states:
            bot.reply_to(message, "üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞.")
            return
        
        current_state = user_states[user_id]['state']
        
        if current_state == 'waiting_name':
            handle_name_input(message, text)
        elif current_state == 'waiting_birth_date':
            handle_birth_date_input(message, text)
        elif current_state == 'waiting_citizenship':
            handle_citizenship_input(message, text)
        else:
            bot.reply_to(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞.")
    
    def handle_name_input(message, text):
    """Handle full name input."""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –§–ò–û (–º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞)
    if len(text.split()) < 2:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û
    user_states[user_id]['data']['full_name'] = text
    user_states[user_id]['state'] = 'waiting_birth_date'
    
    bot.reply_to(message, 
        f"‚úÖ –§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {text}\n\n"
        f"üìÖ –í–æ–ø—Ä–æ—Å 2: –ö–∞–∫–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è?\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990)"
    )

    def handle_birth_date_input(message, text):
    """Handle birth date input."""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–î–î.–ú–ú.–ì–ì–ì–ì)
    date_pattern = r'^\d{2}\.\d{2}\.\d{4}$'
    if not re.match(date_pattern, text):
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990)")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
        birth_date = datetime.strptime(text, '%d.%m.%Y')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è
        if birth_date > datetime.now():
            bot.reply_to(message, "‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
            return
        
        if birth_date.year < 1900:
            bot.reply_to(message, "‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ 1900 –≥–æ–¥–∞!")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
        user_states[user_id]['data']['birth_date'] = text
        user_states[user_id]['state'] = 'waiting_citizenship'
        
        bot.reply_to(message, 
            f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {text}\n\n"
            f"üåç –í–æ–ø—Ä–æ—Å 3: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, –£–∫—Ä–∞–∏–Ω–∞, –ë–µ–ª–∞—Ä—É—Å—å, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω"
        )
        
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã.")

    def handle_citizenship_input(message, text):
    """Handle citizenship input."""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ
    if len(text.strip()) < 2:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ
    user_states[user_id]['data']['citizenship'] = text.strip()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    full_name = user_states[user_id]['data']['full_name']
    random_data = data_generator.generate_all_random_data(full_name)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    all_data = {**user_states[user_id]['data'], **random_data}
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if save_survey_data(user_id, all_data):
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = create_survey_report(all_data)
        bot.reply_to(message, report)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del user_states[user_id]
    else:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel")

    def save_survey_data(user_id, data):
    """Save survey data to database."""
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.info(f"Saving survey data for user {user_id}: {data}")
        return True
    except Exception as e:
        logger.error(f"Error saving survey data: {e}")
        return False

    def create_survey_report(data):
    """Create survey completion report."""
    report = (
        "üéâ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
        "üìã –í–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üë§ –§–ò–û: {data['full_name']}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birth_date']}\n"
        f"üåç –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {data['citizenship']}\n\n"
        "üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone_number']}\n"
        f"üìß Email: {data['email']}\n"
        f"üè† –ê–¥—Ä–µ—Å: {data['address']}\n"
        f"üìÑ –ü–∞—Å–ø–æ—Ä—Ç: {data['passport_series']} {data['passport_number']}\n"
        f"üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {data['education']}\n"
        f"üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {data['occupation']}\n"
        f"üí∞ –£—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞: {data['income_level']}\n"
        f"üíç –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {data['marital_status']}\n"
        f"üë∂ –î–µ—Ç–∏: {data['children_count']}\n\n"
        "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞."
    )
    return report


if __name__ == '__main__':
    # Setup database and handlers
    if setup_database():
        logger.info("Database connected successfully")
    else:
        logger.warning("Database connection failed")
    
    setup_handlers()
    
    # Run bot in polling mode
    logger.info("Starting Telegram bot...")
    bot.polling(none_stop=True)
