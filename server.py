from flask import Flask, jsonify
import os
import threading
import logging
from bot import run_bot
import database
from db import init_db, save_response

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ"""
    return """
    <h1>ü§ñ Telegram Questionnaire Bot</h1>
    <p>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!</p>
    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</p>
    <p><strong>–§—É–Ω–∫—Ü–∏–∏:</strong></p>
    <ul>
        <li>üìã –û–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</li>
        <li>üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ SQLite</li>
        <li>üåê –ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ Render</li>
    </ul>
    <p><a href="/health">üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã</a></p>
    <p><a href="/db-info">üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</a></p>
    <p><a href="/test-db">üß™ –¢–µ—Å—Ç –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</a></p>
    """

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_health = database.health_check()
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        overall_status = "healthy" if db_health["status"] == "healthy" else "degraded"
        
        return jsonify({
            "status": overall_status,
            "timestamp": database.datetime.now().isoformat(),
            "database": db_health,
            "bot": "running",
            "server": "flask"
        })
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return jsonify({
            "status": "unhealthy",
            "error": str(e),
            "timestamp": database.datetime.now().isoformat()
        }), 500

@app.route('/db-info')
def db_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db_info = database.get_database_info()
        return jsonify({
            "database_info": db_info,
            "timestamp": database.datetime.now().isoformat()
        })
    except Exception as e:
        logger.error(f"Database info failed: {e}")
        return jsonify({
            "error": str(e),
            "timestamp": database.datetime.now().isoformat()
        }), 500

@app.route('/stats')
def stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–æ—Å–æ–≤"""
    try:
        all_responses = database.get_all_responses()
        total_responses = len(all_responses)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        user_counts = {}
        for response in all_responses:
            user_id = response.user_id
            user_counts[user_id] = user_counts.get(user_id, 0) + 1
        
        unique_users = len(user_counts)
        
        return jsonify({
            "total_responses": total_responses,
            "unique_users": unique_users,
            "average_per_user": round(total_responses / unique_users, 2) if unique_users > 0 else 0,
            "timestamp": database.datetime.now().isoformat()
        })
    except Exception as e:
        logger.error(f"Stats failed: {e}")
        return jsonify({
            "error": str(e),
            "timestamp": database.datetime.now().isoformat()
        }), 500

@app.route('/test-db')
def test_db():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (db.py)"""
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        test_user_id = 12345
        test_question = "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"
        test_answer = "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"
        
        save_response(test_user_id, test_question, test_answer)
        
        return jsonify({
            "status": "success",
            "message": "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
            "user_id": test_user_id,
            "question": test_question,
            "answer": test_answer,
            "timestamp": database.datetime.now().isoformat()
        })
    except Exception as e:
        logger.error(f"Test DB failed: {e}")
        return jsonify({
            "status": "error",
            "error": str(e),
            "timestamp": database.datetime.now().isoformat()
        }), 500

def run_flask_server():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (db.py)
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (db.py)...")
        init_db()  # —Å–æ–∑–¥–∞—Å—Ç —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        logger.info("–ù–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (database.py)
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (database.py)...")
        if database.init_db():
            logger.info("–°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
        bot_thread = threading.Thread(target=run_bot, daemon=True)
        bot_thread.start()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        
        # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
        port = int(os.environ.get("PORT", 5008))
        logger.info(f"–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        
        app.run(
            host='0.0.0.0', 
            port=port,
            debug=False,
            threaded=True  # –í–∫–ª—é—á–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        raise

if __name__ == '__main__':
    run_flask_server()
